CHIP CPU {
  IN inM[16], instruction[16], reset;
  OUT outM[16], writeM, addressM[15], pc[15];
  PARTS:
  And(a=instruction[15], b=instruction[4], out=loadd);
  And(a=instruction[15], b=instruction[5], out=loada);
  And(a=instruction[15], b=instruction[3], out=writeM);
  Not(in=instruction[15], out=ain);
  Mux16(a=instruction, b=aluout, sel=instruction[15], out=aval);
  Or(a=ain, b=loada, out=loadf);
  ARegister(in=aval, load=loadf, out=a, out[0..14]=ar, out[0..14]=addressM);
  DRegister(in=aluout, load=loadd, out=d);
  Mux16(a=a, b=inM, sel=instruction[12], out=y);
  ALU(x=d, y=y, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout, out=outM, zr=zr, ng=ng);
  Not(in=zr, out=nzr);
  Not(in=ng, out=pst);
  And(a=nzr, b=pst, out=jgt);
  Or(a=zr, b=pst, out=jge);
  And(a=nzr, b=ng, out=jlt);
  Or(a=zr, b=ng, out=jle);
  Mux(a=false, b=jgt, sel=instruction[0], out=m1);
  Mux(a=zr, b=jge, sel=instruction[0], out=m2);
  Mux(a=jlt, b=nzr, sel=instruction[0], out=m3);
  Mux(a=jle, b=true, sel=instruction[0], out=m4);
  Mux(a=m1, b=m2, sel=instruction[1], out=m5);
  Mux(a=m3, b=m4, sel=instruction[1], out=m6);
  Mux(a=m5, b=m6, sel=instruction[2], out=jump);
  And(a=jump, b=instruction[15], out=njump);
  Not(in=njump, out=inc);
  PC(in=a, load=njump, inc=inc, reset=reset, out[0..14]=pc);
}