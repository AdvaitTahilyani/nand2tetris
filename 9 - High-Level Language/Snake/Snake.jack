class Snake {
    field int size;
    field Array snake;
    static int SquareSize;
    field Array temp;
    field Square sq;
    constructor Snake new(int ix, int iy, int idir) {
        let SquareSize = 3;
        let size = 1;
        let snake = Array.new(25);
        let snake[0] = Array.new(2);
        let temp = snake[0];
        let temp[0] = Square.new(ix, iy, SquareSize);
        let temp[1] = idir;
        return this;
    }
    method void increase() {
        var int y;
        var int dir;
        var int x;
        let snake[size] = Array.new(2);
        let temp = snake[size-1];
        let sq = temp[0];
        let x = sq.getX();
        let y = sq.getY();
        let dir = temp[1];
        let temp = snake[size];
        if (dir = 0) {
            let temp[0] = Square.new(x-3, y, SquareSize);
        } if (dir = 1) {
            let temp[0] = Square.new(x+3, y, SquareSize);
        } if (dir = 2) {
            let temp[0] = Square.new(x, y-3, SquareSize);
        } if (dir = 3) {
            let temp[0] = Square.new(x, y+3, SquareSize);
        }
        let size = size + 1;
        return;
    }
    method void move(int dir) {
        var boolean flag;
        var int xlead;
        var int ylead;
        var int i;
        var bool temp1;
        var Array temp2;
        let flag = false;
        let xlead = getX();
        let ylead = getY();
        let i = size - 1;
        let temp = snake[size-1];
        let sq = temp[0];
        do sq.erase();
        do sq.dispose();
        do temp.dispose();
        while (i > 0) {
            let temp2 = snake[i];
            let snake[i] = snake[i-1];
            let i = i - 1;
        }
        let snake[0] = Array.new(2);
        let temp = snake[0];
        let temp[0] = Square.new(xlead, ylead, SquareSize);
        let sq = temp[0];
        if (size = 1) {
            let flag = true;
        }
        let temp[1] = dir;
         if (dir = 0) {
            if (~sq.moveRight(flag)) {
                do reset();
                return;
            }
        } if (dir = 1) {
            if (~sq.moveLeft(flag)) {
                do reset();
                return;
            }
        } if (dir = 2) {
            if (~sq.moveUp(flag)) {
                do reset();
                return;
            }
        } if (dir = 3) {
            if (~sq.moveDown(flag)) {
                do reset();
                return;
            }
        }
        return;
    }
    method void reset() {
        var int i;
        let i = 0;
        while (i < size) {
            let temp = snake[i];
            let sq = temp[0];
            do sq.erase();
            do sq.dispose();
            do temp.dispose();
            let i = i + 1;
        }
        let size = 1;
        let snake[0] = Array.new(2);
        let temp = snake[0];
        let temp[0] = Square.new(0, 0, SquareSize);
        let temp[1] = 0;
        return;
    }
    method int getX() {
        let temp = snake[0];
        let sq = temp[0];
        return sq.getX();
    }
    method int getY() {
        let temp = snake[0];
        let sq = temp[0];
        return sq.getY();
    }
    method int getSize() {
        return size;
    }
    method void dispose() {
        var int i;
        let i = 0;
        while (i < size) {
            let temp = snake[i];
            let sq = temp[0];
            do sq.erase();
            do sq.dispose();
            do temp.dispose();
            let i = i + 1;
        }
        do snake.dispose();
        do Memory.deAlloc(this);
        return;
    }
}